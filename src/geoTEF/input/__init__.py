#!/usr/bin/env python

"""
   @package geoTEF.input
"""

# -----------------------------------------------------------------------------------
# (C)opyrights 2008-2009 by Albert Weichselbraun <albert.weichselbraun@wu.ac.at>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# -----------------------------------------------------------------------------------

__author__   = "Albert Weichselbraun"
__revision__ = "$Id$"

from collections import defaultdict
from itertools import islice
from csv import reader
from eWRT.ws.geonames import GeoEntity
from os.path import basename
try:
    import psyco
    psyco.full()
except ImportError:
    pass

class IResultCollection(object):
    """ a collection of result objects implementing the ILocationReference 
        interface """

    def __init__(self):
        self.data = defaultdict(list)  # mapping: {document_id: [ILocationReference, ] }
        self.name = ""

    def read(self, fHandle):
        """ @param[in] fHandle ... reads the file from input and sets the name attribut """
        if hasattr(fHandle, "name"):
            fName = fHandle.name
        else:
            fName = fHandle.filename
        self.name = basename( fName ).split(".", 2)[0]

    def __iter__(self): return self

    def next(self):
        """ returns the next list of Result objects """
        raise NotImplemented


class ResultCollection(IResultCollection):
    """ a collection initialized by its constructor used for unittesting """

    def __init__(self, data, name):
        IResultCollection.__init__(self)
        self.data.update( data )
        self.name = name
    

class CSVResultCollection(IResultCollection):
    """ reads results from csv files as the ones generated by johannes duong
          document_id,geonames_id,country,geoUrl
        and sets the entity's significance based on its population
    """
    def read(self, fHandle):
        """ @param[in] fHandle ... file handle of the input file 
        """
        print fHandle
        IResultCollection.read(self, fHandle)
        for document_id, geonames_id, country, geoUrl in reader(fHandle):
            g = GeoEntity.factory( id = int(geonames_id) )[0]
            self.data[document_id].append( (1., g) )

        self.setSignificance()


    def setSignificance(self):
        """ sets the significance based on the population """

        res = defaultdict(list)
        for document_id, entities in self.data.iteritems():
            population_max = float( max( [ g[1].entityDict['population'] for g in entities ] ) or 0.0 )
            # set no significance values for entities with no population data
            if population_max == 0.0:
                continue

            refined_entities = [ ( (g[1].entityDict['population'] or 0.)/population_max, g[1] ) for g in entities ]
            res[document_id] = refined_entities

        self.data = res


class SigCSVResultCollection(IResultCollection):
    """ reads results from csv files containing significance values
        document_id,geonames_id,country,geoUrl,significance
    """
    def read(self, fHandle):
        """ @param[in] fHandle ... file handle of the input file 
        """
        IResultCollection.read(self, fHandle)
        print reader(fHandle).next()
        print reader(fHandle).next()
        for document_id, geonames_id, country, geoUrl, significance in ( islice(row,5) for row in reader(fHandle)):
            self.data[document_id].append( (float(significance), GeoEntity.factory( id = int(geonames_id) )[0]) )


class TestResultCollection( object ):

    def testInterface(self):
        """ verifies that the interface sets the name correctly """
        c = IResultCollection()
        c.read( open("/etc/passwd") )
        assert c.name == "passwd"


